#!/bin/bash

# Author: Joshua Elliott
# Sets up my dev environment

# TODO: build custom vim (pkgbuild for arch), install rvm/ruby, 

# This causes the script to exit if a command fails
set -e

# colorized output
function cinfo() {
  echo -e "\E[34m$1\E[0m"
}
function cwarn() {
  echo -e "\E[33m$1\E[0m"
}
function cerror() {
  echo -e "\E[31m$1\E[0m"
}

cd $HOME
cinfo "Setting up your environment..."

cwarn "Make sure you have added this machine's public key to your github account."
sleep 2

# read -p "Have you added this machine's public key to your github account? (y/n) " yesno
# case $yesno in
#   [Yy]* ) echo "Good for you!"; break;;
#   [Nn]* ) echo "You need to do that first. Aborting."; exit 1;;
#   * ) echo "Please answer yes or no.";;
# esac

### Check OS ###
platform='unknown'
case `uname` in
  Darwin)
    platform=mac
    ;;
  Linux)
    platform=linux
    ;;
  *)
    cerror "Unsupported operating system. Aborting"
    exit 1
    ;;
esac

# Determine the specific linux distro
if [ $platform = 'linux' ]; then
  if [ -f /etc/debian_version ]; then
    platform=debian
  elif [ -f /etc/arch-release ]; then
    platform=arch
  else
    cwarn "Automated installation not supported for this operating system.\
            Make sure you have the following installed: git, zsh, mercurial, vim dependencies"
    sleep 2
  fi
fi

cinfo "Operating System:   "$platform

# if [ -e "$HOME/.config/.exthrd.lock" ]; then
#   echo "You have already set up your environment here. You will need to run 'unsetmeup' if you want to run setup again."
#   exit 1
# fi
# touch $HOME/.config/.exthrd.lock

### Install programs ###
cinfo "Installing programs..."

VIM_CONFIG_OPTS='--enable-rubyinterp=yes \
                 --with-features=huge \
                 --with-compiledby=jelliott'

# OSX
if [ $platform = 'mac' ]; then
  # Install ruby (rvm)
  curl -L https://get.rvm.io | bash -s stable --ruby
  ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
  brew install macvim
  brew install git
  brew install zsh
  brew install coreutils

# Debian
elif [ $platform = 'debian' ]; then
  # First update package database
  sudo apt-get update
  # Install build tools
  sudo apt-get install build-essential

  sudo apt-get install git
  sudo apt-get install zsh
  sudo apt-get install mercurial
  sudo apt-get build-dep vim

  # Install ruby (rvm)
  curl -L https://get.rvm.io | bash -s stable --ruby

  cinfo "Building vim..."
  mkdir -p $HOME/builds
  cd $HOME/builds
  hg clone https://vim.googlecode.com/hg/ vim
  cd vim
  ./configure $VIM_CONFIG_OPTS
  make
  sudo make install

# Arch
elif [ $platform = 'arch' ]; then
  # First update package database 
  sudo pacman -Syy
  # Install build tools
  sudo pacman -S base-devel

  sudo pacman -S git
  sudo pacman -S zsh
  sudo pacman -S mercurial
  # create PKGBUILD for this?
  sudo pacman -S vim-runtime

  # Install ruby (rvm)
  curl -L https://get.rvm.io | bash -s stable --ruby
  
  cinfo "Building vim..."
  mkdir -p $HOME/builds
  cd $HOME/builds
  hg clone https://vim.googlecode.com/hg/ vim
  cd vim
  ./configure $VIM_CONFIG_OPTS
  make
  sudo make install

else
  cwarn "nothing automatically installed"

fi

### Backup files ###
if [ -f $HOME/.vimrc ]; then
  cp $HOME/.vimrc $HOME/.vimrc.backup
  rm $HOME/.vimrc
  cinfo "Backed up .vimrc"
fi

if [ -f $HOME/.zshrc ]; then
  cp $HOME/.zshrc $HOME/.zshrc.backup
  rm $HOME/.zshrc
  cinfo "Backed up .zshrc"
fi

### deploy dotfiles repo ###
cinfo "Deploying dotfiles repo"
cd $HOME
git init
git remote add origin git@github.com:joshuacelliott/dotfiles.git
git fetch
git branch master origin/master
git reset --hard origin/master

git submodule init
git submodule update
autogi
$HOME/.config/gnome-terminal-colors-solarized/set_dark.sh

### oh-my-zsh ###
git clone git://github.com/robbyrussell/oh-my-zsh.git $HOME/.oh-my-zsh
# putting echo in front of this means that the script won't exit if chsh fails (like chsh xxxxxxxx || true)
echo chsh -s /bin/zsh `whoami`
# zsh
# source .zshrc

# Check that vim has support for:
vim --version | grep "+clipboard" >/dev/null 2>&1 || { cwarn "Warning: vim not compiled with +clipboard"; }
vim --version | grep "+ruby" >/dev/null 2>&1 || { cwarn "Warning: vim not compiled with +ruby"; }

cinfo "Finished setting up environment. You should log out and log back in now."
